(1.1)^5
?rbinom
rbinom(100,1,.5)
rnorm(100)
library(hdrcde)
library(hdrcde)
hdr(faithful$eruptions)
stuff <- list(12, 9, 2, "cat", 25, 10, "bird")
for (i in 1:length(stuff)) {
try (print(log(stuff[[i]])))
}
rm(list=ls())
1/2+27/32-11/32
(1/2)+(27/32)-(11/32)
1-5/32
1/2-5/32
27/64
plot(exp(seq(-10,10,length.out=10)))
plot(exp(-(seq(-10,10,length.out=10)))
)
log(-1)
sqrt(2)
2*sqrt(2)/pi
S.MC <- NULL
j <- 1
S.j <- 0
# Simulation of Galton machine
n <- 5 #Number of steps
MC <- 100 #Monte Carlo simulations
p <- 0.5 #probability
S.MC <- NULL
i <- 2
I <- (rbinom(1, n=1, prob=p) - 0.5) * 2
S.j[i] <- S.j[i-1] + I
S.MC
rbind(S.MC, S.j)
S.MC <- NULL
for(j in 1:MC)
{
S.j <- 0
for(i in 2:(n+1))
{
I <- (rbinom(1, n=1, prob=p) - 0.5) * 2
S.j[i] <- S.j[i-1] + I
}
S.MC <- rbind(S.MC, S.j)
}
S.MC
matplot(t(S.MC), type='l', col=1)
#Visualisation of a specific trajectory
lines(S.MC[40,], col=2, lwd=3)
#Distribution of trajectories
distrib.n <- table(S.MC[,n+1]) / MC
plot(distrib.n)
?dbinom
# Comparison with the corresponding binomial distribution
distrib.teo <- dbinom(0:n, n, p)
plot(distrib.teo)
?reserved
a <- 5   # or: a = 5
class(a)
typeof(a)
?class
m <- "pippo"
class(m)
x <- 5
y <- 12
# Note that:
y^x/5
y^(x/5)
y%/%x   # quotient - integer part
SP <- function(a,b)
{
s <- a+b
p <- a*b
list(s,p)
}
SP(2,5)
rm(list=ls())
?matrix
M <- matrix(1:12, nrow=3, ncol=4)
View(M)
A <- c(8,-1,3,7)
B <- c(1,-4,-2,2)
M %*% A
A2 <- A %*% t(A)
diag(4)
diag(A2)
A2[ A2 < 20 ]
View(A2)
A2[ lower.tri(A2) ]    # upper.triangular
lower.tri(A2)
dati <- data.frame("Sex" = c(1,2,2,1,1), "Agr" = c(18,21,15,17,18),
"Name" = c("Sofia","Gianni","Carlo","Anna","Maria"))
View(dati)
ln 0.5
log(0.5)
log(1)
log(0.9)
log(2)
log(3)
log(0.1)
F = function(x) {
if (x < -1) {
0
}
else {
x^2
}
}
mu <-c(800,810,820,830,840)
sd.mu <- 80/sqrt(10)
(841.62-mu)/sd.mu
cdf.mu <- (841.62-mu)/sd.mu
1-pnorm(cdf.mu)
1-0.9495
1-0.8944
mu <-c(800,810,820,830,840)
sd.mu <- 80/sqrt(10)
cdf.mu <- (841.62-mu)/sd.mu
1-pnorm(cdf.mu)
?rnorm
# Monte Carlo Study - Testing for mu
# Setting : X ~ N(mu,sigma) - sigma known
# H0:mu=mu.0 vs H1:mu=mu.1>mu.0
mu.0 <- 800
mu.1 <- 850
n <- 10
alpha <- 0.05
sigma <- 80
# Critical value
k.alpha <- mu.0+qnorm(1-alpha)*sigma/sqrt(n)
# MC replications
MC <- 1000
# Studying level (true H0)
decision <- NULL
for(j in 1:MC)
{
x.obs <- rnorm(n, mu.0, sigma)
x.bar <- mean(x.obs)
decision[j] <- (x.bar > k.alpha)
}
mean(decision)  # estimated level
mu <-c(800,810,820,830,840)
sd.mu <- 80/sqrt(10)
cdf.mu <- (841.62-mu)/sd.mu
1-pnorm(cdf.mu)
pnorm(-cdf.mu)
qnorm(0.1)
883.48-860
50/sqrt(15)
23.48/12.90994
5/6
5/6*4
library(devtools)
library(roxygen2)
library(knitr)
library(testthat)
library(stats)
library(graphics)
#For home
#setwd("C:/Users/Lax/OneDrive/MSE bootstrap parent folder/SparseMSElatest/SparseMSE")
#For university
setwd("C:/Users/lax.chan/OneDrive/MSE bootstrap parent folder/SparseMSElatest/SparseMSE")
document()
decode_capture(2,5)
child_captures(1,4)
decode_captures(1,4)
decode_capture(1,4)
zdecode_capture(1,4)
z <-decode_capture(1,4)
z
kd = 2^{(0:(4-1))}[!z]
kd
kd = 2^{(0:(4-1))}[z]
kd
k=1
nlistS=4
z = decode_capture(k, nlists)
nlists=4
z = decode_capture(k, nlists)
z
kd = 2^{(0:(nlists-1))}[z]
kd
return(k - kd)
k - kd
k=2
nlists=10
z = decode_capture(k, nlists)
kd = 2^{(0:(nlists-1))}[z]
z
kd
k - kd
rm(list=ls())
k=2
nlists=10
z = decode_capture(k, nlists)
jz = sum(z)
kanc = as.vector(k)
kd1 = kanc
for (i in (1:nlists)) {
kd2 = NULL
for (j in (1:length(kanc))) kd2 = c(kd2, parent_captures(kanc[j], nlists))
kanc = unique(kd2)
kd1 = c(kd1, kanc) }
kd1
sort(kd1)
convert_from_hierarchy("[1,2,3,4,5]", findancestors = T)
encode_capture(c("T","F","T","F"))
encode_capture(c(T,F,T,F))
Korea
datlist = ingest_data(Korea)
parset ="[0,0,1]"
checkident.1()
checkident.1(parest,datlist)
checkident.1(parset,datlist)
document()
document()
document()
gethiermodels(nlists=5,maxorder=4)
gethiermodels(nlists, maxorder=2)
gethiermodels(nlists, maxorder=3)
gethiermodels(nlists=5, maxorder=3)
gethiermodels(nlists=5, maxorder=2)
document()
?convet_to_hierarchy
?convert_to_hierarchy
xdatin=ingest_data(Korea)
xdatin$nlists
convert_to_hierarchy("[1,0,0]",3)
convert_to_hierarchy(1,3)
convert_to_hierarchy(2,3)
convert_to_hierarchy(7,3)
convert_from_hierarchy
?convert_from_hierarchy
convert_from_hierarchy(modelstr, findancestors =T)
convert_from_hierarchy("[1,2,3,4,5]", findancestors =T)
convert_from_hierarchy("[1,0,0]", findancestors =T)
document()
?modelorder
document()
?modelorder
document()
hiermodels
?hiermodels
modelorder("[123,125,134,235,345]"  )
?subsetmat
data(Korea)
z=sortmodelbic(Korea)
zdat = tidylists(z$xdata, includezerocounts = T)
n1 = dim(zdat)[1]
z=sortmodelbic(Korea)
z=sortmodelsbic(Korea)
zdat = tidylists(z$xdata, includezerocounts = T)
n1 = dim(zdat)[1]
n2 = dim(zdat)[2]
countsobserved = zdat[, n2]
nobs = sum(countsobserved)
jest = (countsobserved > 0)
topmodels = dimnames(z$res)[[1]]
View(z$res)
fit_hier_model(xdatin,"[12,23]")
data(Korea)
xdatin = ingest_data(Korea)
fit_hier_model(xdatin,"[12,23]")
?stringunpack
modelstr = "[12,23]"
convert_from_hierarchy(modelstr, findancestors =T)
z=sortmodelsbic(Korea)
topmodels = dimnames(z$res)[[1]]
topmodels
convert_from_hierarchy(modelstr, findancestors=F)
convert_from_hierarchy(modelstr, findancestors=T)
convert_from_hierarchy(modelstr, findancestors=F)
document()
?sortmodelsbic
z=bootstrapcal(z)
document()
document()
rm(list=ls())
