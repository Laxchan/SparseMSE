(1.1)^5
?rbinom
rbinom(100,1,.5)
rnorm(100)
library(hdrcde)
library(hdrcde)
hdr(faithful$eruptions)
stuff <- list(12, 9, 2, "cat", 25, 10, "bird")
for (i in 1:length(stuff)) {
try (print(log(stuff[[i]])))
}
rm(list=ls())
1/2+27/32-11/32
(1/2)+(27/32)-(11/32)
1-5/32
1/2-5/32
27/64
plot(exp(seq(-10,10,length.out=10)))
plot(exp(-(seq(-10,10,length.out=10)))
)
log(-1)
sqrt(2)
2*sqrt(2)/pi
S.MC <- NULL
j <- 1
S.j <- 0
# Simulation of Galton machine
n <- 5 #Number of steps
MC <- 100 #Monte Carlo simulations
p <- 0.5 #probability
S.MC <- NULL
i <- 2
I <- (rbinom(1, n=1, prob=p) - 0.5) * 2
S.j[i] <- S.j[i-1] + I
S.MC
rbind(S.MC, S.j)
S.MC <- NULL
for(j in 1:MC)
{
S.j <- 0
for(i in 2:(n+1))
{
I <- (rbinom(1, n=1, prob=p) - 0.5) * 2
S.j[i] <- S.j[i-1] + I
}
S.MC <- rbind(S.MC, S.j)
}
S.MC
matplot(t(S.MC), type='l', col=1)
#Visualisation of a specific trajectory
lines(S.MC[40,], col=2, lwd=3)
#Distribution of trajectories
distrib.n <- table(S.MC[,n+1]) / MC
plot(distrib.n)
?dbinom
# Comparison with the corresponding binomial distribution
distrib.teo <- dbinom(0:n, n, p)
plot(distrib.teo)
?reserved
a <- 5   # or: a = 5
class(a)
typeof(a)
?class
m <- "pippo"
class(m)
x <- 5
y <- 12
# Note that:
y^x/5
y^(x/5)
y%/%x   # quotient - integer part
SP <- function(a,b)
{
s <- a+b
p <- a*b
list(s,p)
}
SP(2,5)
rm(list=ls())
?matrix
M <- matrix(1:12, nrow=3, ncol=4)
View(M)
A <- c(8,-1,3,7)
B <- c(1,-4,-2,2)
M %*% A
A2 <- A %*% t(A)
diag(4)
diag(A2)
A2[ A2 < 20 ]
View(A2)
A2[ lower.tri(A2) ]    # upper.triangular
lower.tri(A2)
dati <- data.frame("Sex" = c(1,2,2,1,1), "Agr" = c(18,21,15,17,18),
"Name" = c("Sofia","Gianni","Carlo","Anna","Maria"))
View(dati)
ln 0.5
log(0.5)
log(1)
log(0.9)
log(2)
log(3)
log(0.1)
F = function(x) {
if (x < -1) {
0
}
else {
x^2
}
}
mu <-c(800,810,820,830,840)
sd.mu <- 80/sqrt(10)
(841.62-mu)/sd.mu
cdf.mu <- (841.62-mu)/sd.mu
1-pnorm(cdf.mu)
1-0.9495
1-0.8944
mu <-c(800,810,820,830,840)
sd.mu <- 80/sqrt(10)
cdf.mu <- (841.62-mu)/sd.mu
1-pnorm(cdf.mu)
?rnorm
# Monte Carlo Study - Testing for mu
# Setting : X ~ N(mu,sigma) - sigma known
# H0:mu=mu.0 vs H1:mu=mu.1>mu.0
mu.0 <- 800
mu.1 <- 850
n <- 10
alpha <- 0.05
sigma <- 80
# Critical value
k.alpha <- mu.0+qnorm(1-alpha)*sigma/sqrt(n)
# MC replications
MC <- 1000
# Studying level (true H0)
decision <- NULL
for(j in 1:MC)
{
x.obs <- rnorm(n, mu.0, sigma)
x.bar <- mean(x.obs)
decision[j] <- (x.bar > k.alpha)
}
mean(decision)  # estimated level
mu <-c(800,810,820,830,840)
sd.mu <- 80/sqrt(10)
cdf.mu <- (841.62-mu)/sd.mu
1-pnorm(cdf.mu)
pnorm(-cdf.mu)
qnorm(0.1)
883.48-860
50/sqrt(15)
23.48/12.90994
5/6
5/6*4
remove.packages("SparseMSE")
library(devtools)
devtools::install_github("Laxchan/SparseMSE")
?pnorm
pnorm(3)
4/6*4
2/6*4
1*0.4+2*0.2+4*0.3+12*0.1
1*0.4+2^2*0.2+4^2*0.3+12^2*0.1
20.4-(3.2)^2
5/6*4
2/6*4
1+1.5+2+1.5
1+1.5+1.5
2335-380-60
2335-380-60-420
1475+1900
?cat
X.j <- cat(paste("dati.turn$", nome, sep=""))
X.j <- cat(paste("dati.turn$", "nome", sep=""))
mtcars
data(mtcars)
force(mtcars)
View(mtcars)
names.list <- colnames(mtcars)
mtcars$mpg
View(mtcars)
X.j <- cat(paste("mtcars$"), mpg, sep =" ")
X.j <- cat(paste("mtcars$"), "mpg", sep =" ")
X.j <- cat(paste("mtcars$"), "mpg", sep ="")
toString(X.j)
as.factor(X.j)
mtcars$mpg
as.numeric(X.j)
X.j
do.call("=",list("mtcars$mpg", 1))
deparse(X.j)
strsplit(X.j, "=")
X.j <- cat(paste("mtcars$"), "mpg", sep ="")
X.j
X.j <- cat(paste("mtcars$"), "mpg", sep ="")
data(mtcars)
names.list <- colnames(mtcars)
X.j <- cat(paste("mtcars$"), "mpg", sep ="")
X.j <- as.numeric(cat(paste("mtcars$"), "mpg", sep =""))
X.j <- as.name(cat(paste("mtcars$"), "mpg", sep =""))
X.j <- parse(cat(paste("mtcars$"), "mpg", sep ="")))
X.j <- parse(cat(paste("mtcars$"), "mpg", sep =""))
X.j <- cat(paste("mtcars$"), "mpg", sep =""))
X.j <- cat(paste("mtcars$", "mpg", sep =""))
X.j <- parse(cat(paste("mtcars$", "mpg", sep ="")))
cat(paste("mtcars$", "mpg", sep ="")
cat(paste("mtcars$", "mpg", sep =""))
X.j <- cat(paste("mtcars$", "mpg", sep =""))
X.j <- cat("mtcars$"paste("mpg", sep =""))
?paste
X.j <- cat(paste(mtcars$, "mpg", sep =""))
X.j <- cat(paste(mtcars$"mpg", sep =""))
X.j <- cat(paste(mtcars$"nameslist","[1]" sep =""))
X.j <- cat(paste(mtcars$"nameslist","[1]", sep =""))
X.j <- cat(paste(mtcars$"nameslist[j]", sep =""))
j=1
X.j <- cat(paste(mtcars$"nameslist[j]", sep =""))
j=1
X.j <- cat(paste(mtcars$"names.list[j]", sep =""))
X.j <- cat(paste(mtcars$"names.list", "j" sep =""))
X.j <- cat(paste(mtcars$"names.list", "[j]" sep =""))
X.j <- cat(paste(mtcars$"names.list", sep =""))
X.j <- cat(paste(mtcars$"mpg", sep =""))
X.j <- cat(paste(mtcars$"cyl", sep =""))
X.j <- get(cat(paste(mtcars$"cyl", sep ="")))
?get
?assign
?paste
X.j <- cat(paste(mtcars$, "names.list", sep =""))
paste(mtcars$, "names.list", sep ="")
X.j <- cat(paste("mtcars","$", "names.list", sep =""))
X.j <- cat(paste("mtcars",$, "names.list", sep =""))
?strsplit
unlist(strsplit("a.b.c", "."))
strsplit(paste("mtcars","$", "names.list", sep =""))
strsplit(paste("mtcars$", "names.list", sep =""))
paste("mtcars","$", names.list, sep ="")
unlist(paste("mtcars","$", names.list, sep =""))
X.j <- paste("mtcars","$", names.list, sep ="")
X.j[1]
eval("mtcars$mpg")
eval("mtcars$mpg")
gsub("\\s*\\([^\\)]+\\)","",as.character(X.j))
X.j
X.j <- paste("mtcars","$", names.list, sep =",")
X.j <- paste("mtcars","$", names.list, sep ="")
X.j[1]
is.data.frame(mtcars)
mtcars$unlist(mpg[1])
mtcars$names.list[1]
names.list[1]
X.j1 <- names.list[1]
mtcars$X.j1
names.list <- colNames(mtcars)
names.list <- colnames(mtcars)
?collapse
paste(	  collapse="|")
mtcars$"mpg"
mtcars$X.j1
X.j1
mtcars$"X.j1"
mtcars$noquote(X.j1)
X.j2 <- noquote(X.j1)
X.j2
mtcars$X.j2
mtcars$as.character(X.j2)
X.j2 <- as.character( noquote(X.j1))
X.j2
mtcars[X.j2]
mtcars[,X.j2]
names.list1 <-print(names.list, quote=FALSE)
names.list1[1]
mtcars$names.list1[1]
X.j <- parse(cat(paste("mtcars","$", names.list, sep =",")))
X.j <- paste("mtcars","$", names.list, sep ="")
X.j <- parse(paste("mtcars","$", names.list, sep =""))
X.j <- eval(paste("mtcars","$", names.list, sep =""))
?data.frame
colnames(mtcars)
names.list <- colnames(mtcars)
mtcars[,names.list[1]]
X.j <- parse(cat(paste("mtcars","$", names.list, sep =","))
X.j <- cat(paste("mtcars$", names.list1, sep =" ")
X.j <- cat(paste("mtcars$", names.list[1], sep =" ")
X.j <- cat(paste("mtcars$", names.list[1], sep =" "))
names.list[1]
X.j <- cat(paste("mtcars$", "mpg", sep =" "))
X.j <- cat(paste("mtcars$", "mpg", sep =""))
?cat
?capture.i
X.j <- capture.output(cat(paste("mtcars$", "mpg", sep ="")))
X.j
eval(X.j)
scan_txt(X.j)
encodeString(X.j)
unlist("X.j")
unlist(strsplitX.j)
"matcars$mpg"
"mtcars$mpg"
as.call("mtcars$mpg")"mtcars$mpg"
as.call("mtcars$mpg")
as.data.frame.character("mtcars$mpg")
lol <- as.data.frame.character("mtcars$mpg")
View(lol)
lol[1]
lol[1]
eval(lol[1])
lol$`"mtcars$mpg"`
mtcars$"mpg"
mtcars$colnames(mtcars)[1]
mtcars$(colnames(mtcars)[1])
colnames(mtcars)
colnames(mtcars)[1]
colnames(mtcars)[1] ->m
mtcars$m
X.j1 <- names.list[2]
colnames(mtcars)[2] ->m
mtcars$m
colnames(mtcars)[2]- >m
colnames(mtcars)[2] ->m
mtcars$m
data(mtcars)
colnames(mtcars)[2] ->m
mtcars$m
mtcars[,m]
library(devtools)
library(roxygen2)
library(knitr)
library(testthat)
library(stats)
library(graphics)
#For home
#setwd("C:/Users/Lax/Desktop/SparseMSE github/SparseMSE")
#For university
setwd("C:/Users/lax.chan/Desktop/SparseMSE github/SparseMSE")
document()
modelstr = "[12,23]"
zhierroots = convert_from_hierarchy(modelstr, F)
zhier = unique(ancestors(zhierroots, nlists))
zhier = unique(ancestors(zhierroots, 5))
znew = boundary_captures(zhier,nlists)
modelstr = "[12,23]"
nlists=4
zhierroots = convert_from_hierarchy(modelstr, F)
zhier = unique(ancestors(zhierroots, 5))
znew = boundary_captures(zhier,nlists)
modelstr = "[12,23]"
nlists=4
zhierroots = convert_from_hierarchy(modelstr, F)
zhier = unique(ancestors(zhierroots, nlists))
boundary_captures(zhier,nlists)
document()
document()
data(Korea)
zdat=Korea
estimatepopulation(zdat,nboot=10)
document()
document()
data(Korea)
xdata=Korea
counts = xdata[,dim(xdata)[2]]
desmat = xdata[,1:(dim(xdata)[2]-1)]
downhill_fit(counts, desmat)
document()
ancestors(2,10)
encode_capture(c(1,0,0,0,0))
encode_capture(c(1,1,1,1,0))
encode_capture(c(T,F,T,F))
child_captures(2,5)
k=2
nlists=5
z = decode_capture(k, nlists)
z
document()
document()
document()
build_manual(pkg = ".", path = NULL)
zdat=UKdat_5
BICandbootstrapsim(zdat,nsims=1000, nboot=100, pthresh=0.02, iseed=1234)
nsims=100
nboot=100
pthresh=0.02
iseed=1234
alpha=c(0.025, 0.05, 0.1, 0.16, 0.5, 0.84, 0.9, 0.95, 0.975)
noninformativelist=F
verbose=F
#  simulate data
set.seed(iseed)
nobserved = sum(zdat[, dim(zdat)[2]])
BICmods = vector("character", length=nsims)
BICvals = matrix(nrow=nsims, ncol=2)
BICconf = matrix(nrow=nsims, ncol=4, dimnames=list(NULL, c(0.025,0.1,0.9,0.975)))
#   find point estimate using given pthresh
fullestimate = estimatepopulation.0(zdat, quantiles=NULL, pthresh=pthresh, ...)
fullestimate = estimatepopulation.0(zdat, quantiles=NULL, pthresh=pthresh)
#   find estimated cell frequencies for fitted model
popest = fullestimate$estimate
#   set up bootstrap model
predfreq = exp(predict(fullestimate$MSEfit$fit))
modelmat = fullestimate$MSEfit$fit$model[,-1]
simreps = matrix(NA, nrow = dim(modelmat)[1], ncol=nsims)
popestr = round(popest)
for (j in (1:nsims)) {
nobs = rbinom(1,popestr,sum(predfreq)/popest)
simreps[,j] = rmultinom(1,nobs,predfreq)
# find the BIC estimates at the same time
zdatsim = cbind(modelmat, simreps[,j])
if (noninformativelist) zdatsim=removenoninformativelists(zdatsim)
zallres=Rcapture::closedpMS.t(zdatsim, dfreq=T,maxorder=2)
zr = zallres$results
indmin = (1:dim(zr)[1])[zr[,7]==min(zr[,7])]
BICmods[j] = dimnames(zr)[[1]][indmin]
BICvals[j,] = zr[indmin, 1:2]
#  find multinomial 95% and 80% confidence intervals--probably not the most elegant way but it works
BICconf[j,c(2,3)] = Rcapture::closedpCI.t(zdatsim, dfreq=T,mX=BICmods[j], alpha=0.2)$CI[2:3]
BICconf[j,c(1,4)] = Rcapture::closedpCI.t(zdatsim, dfreq=T,mX=BICmods[j])$CI[2:3]
if (verbose) cat(j)
}
j=1
nobs = rbinom(1,popestr,sum(predfreq)/popest)
simreps[,j] = rmultinom(1,nobs,predfreq)
# find the BIC estimates at the same time
zdatsim = cbind(modelmat, simreps[,j])
if (noninformativelist) zdatsim=removenoninformativelists(zdatsim)
zallres=Rcapture::closedpMS.t(zdatsim, dfreq=T,maxorder=2)
zr = zallres$results
zdat=UKdat_5
zdat=UKdat_5
BICandbootstrapsim(zdat,nsims=1000, nboot=100, pthresh=0.02, iseed=1234, noninformativelist=T)
BICandbootstrapsim(zdat,nsims=100, nboot=100, pthresh=0.02, iseed=1234, noninformativelist=T)
nsims=100
nboot=100
pthresh=0.02
iseed=1234
alpha=c(0.025, 0.05, 0.1, 0.16, 0.5, 0.84, 0.9, 0.95, 0.975)
verbose=F
#  simulate data
set.seed(iseed)
nobserved = sum(zdat[, dim(zdat)[2]])
BICmods = vector("character", length=nsims)
BICvals = matrix(nrow=nsims, ncol=2)
BICconf = matrix(nrow=nsims, ncol=4, dimnames=list(NULL, c(0.025,0.1,0.9,0.975)))
fullestimate = estimatepopulation.0(zdat, quantiles=NULL, pthresh=pthresh)
#   find estimated cell frequencies for fitted model
popest = fullestimate$estimate
#   set up bootstrap model
predfreq = exp(predict(fullestimate$MSEfit$fit))
modelmat = fullestimate$MSEfit$fit$model[,-1]
simreps = matrix(NA, nrow = dim(modelmat)[1], ncol=nsims)
popestr = round(popest)
j=1
nobs = rbinom(1,popestr,sum(predfreq)/popest)
simreps[,j] = rmultinom(1,nobs,predfreq)
# find the BIC estimates at the same time
zdatsim = cbind(modelmat, simreps[,j])
if (noninformativelist) zdatsim=removenoninformativelists(zdatsim)
noninformativelist=T
if (noninformativelist) zdatsim=removenoninformativelists(zdatsim)
zallres=Rcapture::closedpMS.t(zdatsim, dfreq=T,maxorder=2)
zr = zallres$results
indmin = (1:dim(zr)[1])[zr[,7]==min(zr[,7])]
indmin
dimnames(zr)[[1]][indmin]
length(dimnames(zr)[[1]][indmin])
length(BICmods)
if (noninformativelist) zdatsim=removenoninformativelists(zdatsim)
zallres=Rcapture::closedpMS.t(zdatsim, dfreq=T,maxorder=2)
zr = zallres$results
indmin = (1:dim(zr)[1])[zr[,7]==min(zr[,7])]
BICmods[j] = dimnames(zr)[[1]][indmin]
BICvals[j,] = zr[indmin, 1:2]
rm(list=ls())
